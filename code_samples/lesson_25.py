"""
Lesson 25
28.11.2023
Знакомство с ООП в Python
Правила нейминга
Всё в Python - объекты, сравнили свой класс со строкой
Методы и атрибуты класса
Познакомились с __init__ и __new__
Посмотрели как создается экземпляр класса (сначала __new__, потом __init__)
Посмотрели что self позволяет работать с атрибутами и методами экземпляра класса
"""

"""
Правила нейминга:
- Классы - CamelCase
- Функции и методы - snake_case
- Переменные и поля - snake_case

Классы принято называть существительными, а методы - глаголами.
Классы объявляются с помощью ключевого слова class.
"""


class Car:
    """
    Класс для представления автомобиля.
    """

    def __init__(self, model: str) -> None:
        """
        Метод для инициализации объекта.
        self - это ссылка на сам объект. Непосредственно на конкретный экземпляр класса.
        """
        self.model = model
        print(f'Создан новый объект класса Car с моделью {self.model}')

    def __new__(cls, *args, **kwargs):
        """
        new создает объект класса, выделяет память под него и возвращает ссылку на него.
        которая идет в качестве первого аргумента в метод __init__.
        cls - это класс, для которого создается объект.
        super() - это ссылка на родительский класс.
        cls.__name__ - обращение к классу и получение его имени.
        :param args:
        :param kwargs:
        """
        print(f'Вызван метод __new__ для класса {cls.__name__}')
        return super().__new__(cls)

    def run(self) -> None:
        """
        Метод для запуска автомобиля.
        По сути, это функция, описанная внутри класса.
        """
        print(f'Автомобиль {self.model} заведен')


car_1 = Car('Запорожец')
car_2 = Car('Mercedes')

"""
Так как в методе у нас есть аргумент self, то мы можем обращаться к атрибутам и методам экземпляра класса.
Т.е. непосредственно к данным именно этого объекта.
"""
car_1.run()
car_2.run()
